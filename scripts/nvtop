#!/usr/bin/python3

import argparse
from subprocess import check_output
import time
import os
import pwd

import pandas as pd


def intcol(line, col):
    return int(line.split()[col])

def owner(pid):
    proc_stat_file = os.stat("/proc/%d" % pid)
    uid = proc_stat_file.st_uid
    username = pwd.getpwuid(uid)[0]
    return username

def sample():
    start = time.time()
    entries = check_output(['nvidia-smi', 'pmon', '-c', '1', '-s', 'mu'],
            universal_newlines=True).splitlines()[2:]
    pids, fb, sm, mem = zip(*[[intcol(l, c) for c in (1, 3, 4, 5)] for l in entries])
    users = [owner(pid) for pid in pids]
    df = pd.DataFrame(list(zip(users, fb, sm, mem, pids)),
            columns=['User', 'FB', 'SM', 'MEM', 'PID'])
    end = time.time()
    if end - start < 0.1:
        time.sleep(0.1 - (end - start))
    return df

def add_units(df):
    df_print = df.copy()
    df_print.FB = ['{:.0f}MiB'.format(fb) for fb in df.FB]
    df_print.SM = ['{:.1f}%'.format(u) for u in df.SM]
    df_print.MEM = ['{:.1f}%'.format(u) for u in df.MEM]
    return df_print

def get_memory():
    entries = check_output(['nvidia-smi', '--query-gpu=memory.total,memory.used',
        '--format=csv'], universal_newlines=True).splitlines()[1]
    total, used = [s.strip() for s in entries.split(',')]
    return total, used

def header(text):
    print(text)
    print('=' * len(text))

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-s", "--seconds", default=1, type=int,
            help="sample for and average over s seconds")
    parser.add_argument("-l", "--loop", default=0, type=int,
            help="wait for l seconds and loop infinitely")
    args = parser.parse_args()

    while True:
        df = pd.concat([sample() for _ in range(args.seconds * 10)])
        averaged = df.groupby([df.PID, df.User]).mean()
        averaged.drop('PID', 1, inplace=True)
        summed = averaged.reset_index()
        summed = summed.groupby(summed.User).sum()
        summed.reset_index()
        summed.drop('PID', 1, inplace=True)
        if args.loop:
            os.system('tput reset')
        header('Processes')
        print(add_units(averaged.sort(['SM'], ascending=False)))
        print('')
        header('Users')
        print(add_units(summed.sort(['SM'], ascending=False)))
        print('')
        header('Memory')
        total, used = get_memory()
        print('{}/{}'.format(used, total))

        if args.loop:
            time.sleep(args.loop)
        else:
            break
